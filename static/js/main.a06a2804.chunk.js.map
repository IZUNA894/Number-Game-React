{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onTileClick","e","console","log","state","answer","setState","score","createData","alert","window","location","reload","num1","Math","floor","random","num2","options","i","push","index","this","tiles","map","x","className","onClick","key","style","textAlign","paddingBottom","marginBottom","alignItems","float","margin","display","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qRAkGeA,G,8DA5Fb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAaRC,YAAa,SAACC,GAEZC,QAAQC,IAAIF,GACTA,GAAK,EAAKG,MAAMC,QACjB,EAAKC,SAAS,CAACC,MAAM,EAAKH,MAAMG,MAAO,KACvCL,QAAQC,IAAI,QACZ,EAAKK,eAGLC,MAAM,SACNC,OAAOC,SAASC,WAxBF,EA4BlBJ,WAAa,WACX,IAAIK,EAAOC,KAAKC,MAAoB,IAAdD,KAAKE,UACvBC,EAAOH,KAAKC,MAAoB,IAAdD,KAAKE,UAC3Bd,QAAQC,IAAIU,EAAKI,GAEjB,IADA,IAAIC,EAAU,GACLC,EAAE,EAAEA,EAAE,EAAEA,IACfD,EAAQE,KAAKN,KAAKC,MAAoB,IAAdD,KAAKE,WAE/Bd,QAAQC,IAAI,UAAUe,GACtB,IAAIb,EAASQ,EAAOI,EAChBI,EAAQP,KAAKC,MAAoB,GAAdD,KAAKE,UAAe,EAC3Cd,QAAQC,IAAIkB,GACZH,EAAQG,GAAShB,EACjB,EAAKC,SAAS,CAACY,UAAQL,OAAKI,OAAKZ,YAvCjC,EAAKD,MAAQ,CACXc,QAAS,CAAC,EAAE,EAAE,EAAE,GAChBL,KAAK,EACLI,KAAK,EACLZ,OAAS,GACTE,MAAM,GAPQ,E,iEAYhBe,KAAKd,e,+BAgCE,IAAD,OAGFe,EADcD,KAAKlB,MAAMc,QACLM,KAAI,SAACC,GACvB,OACE,yBAAKC,UAAU,2CAA2CC,QAAS,kBAAI,EAAK3B,YAAYyB,IAAIG,IAAKH,GAC/F,uBAAGC,UAAU,qBAAsBD,OAQ7C,OAFAvB,QAAQC,IAAI,SAGV,yBAAKuB,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,aAAaG,MAAO,CAACC,UAAW,WAC5C,0BAAMJ,UAAU,IAAhB,kBAKN,yBAAKA,UAAU,0BAA0BG,MAAO,CAACE,cAAe,QAC9D,yBAAKL,UAAU,OACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,aAAaG,MAAO,CAACC,UAAW,WAA9C,kBAAyER,KAAKlB,MAAMS,KAApF,QAA+FS,KAAKlB,MAAMa,KAA1G,KACA,wBAAIS,UAAU,aAAaG,MAAO,CAACC,UAAW,WAA9C,UAAiER,KAAKlB,MAAMG,SAGhF,yBAAKmB,UAAU,OAEZH,GAIH,yBAAKG,UAAU,MAAMG,MAAO,CAACG,aAAa,QACxC,yBAAKN,UAAU,UAAUG,MAAQ,CAAEI,WAAW,WAC5C,uBAAGP,UAAU,6CAA6CG,MAAO,CAACK,MAAM,SAASC,OAAO,OAAOC,QAAQ,SAAUT,QAAS,WAAKjB,OAAOC,SAASC,WAA/I,oB,GApFIyB,IAAMC,YCOJC,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.a06a2804.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './materialize.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      options :[1,2,3,5],\n      num1:3,\n      num2:8,\n      answer : 11,\n      score:0\n\n    }\n  }\n  componentWillMount() {\n    this.createData();\n  }\n  onTileClick =(e)=>{\n    // e.preventDefault();\n    console.log(e);\n    if(e == this.state.answer){\n      this.setState({score:this.state.score +10})\n      console.log('yiee')\n      this.createData();\n    }\n    else{\n      alert('wrong');\n      window.location.reload();\n    }\n\n  }\n  createData = ()=>{\n    var num1 = Math.floor(Math.random()*100);\n    var num2 = Math.floor(Math.random()*100)\n    console.log(num1,num2);\n    var options = [];\n    for( var i=0;i<4;i++){\n      options.push(Math.floor(Math.random()*100))\n    }\n    console.log('options',options);\n    var answer = num1 + num2;\n    var index = Math.floor(Math.random()*10) % 4 ;\n    console.log(index);\n    options[index] = answer;\n    this.setState({options,num1,num2,answer});\n  }\n\n  render(){\n\n    var optionsData = this.state.options;\n    var tiles = optionsData.map((x)=>{\n          return(\n            <div className=\"col s3 red lighten-3 cell valign-wrapper\" onClick={()=>this.onTileClick(x)} key={x}>\n              <p className=\"text center-align\" >{x}</p>\n            </div>\n          )\n    });\n\n\n    console.log('yuuuu');\n\n    return (\n      <div className=\"App\">\n        <div className=\"row red accent-4\">\n          <div className=\"col center s12\">\n            <h1 className=\"white-text\" style={{textAlign: 'center'}}>\n              <span className=\"\">Number Game</span>\n            </h1>\n          </div>\n        </div>\n\n        <div className=\"container  red darken-1\" style={{paddingBottom: '5px'}}>\n          <div className=\"row\">\n            <div className=\"col s12\">\n              <h3 className=\"white-text\" style={{textAlign: 'center'}}>What is sum of {this.state.num1} and {this.state.num2}?</h3>\n              <h3 className=\"white-text\" style={{textAlign: 'center'}}>Score :{this.state.score}</h3>\n            </div>\n          </div>\n          <div className=\"row\">\n\n            {tiles}\n\n          </div>\n\n          <div className='row' style={{marginBottom:'5px'}}>\n            <div className='col s12' style={ { alignItems:'center' }}>\n              <a className=\"waves-effect waves-light btn pink accent-3\" style={{float:'center',margin:'auto',display:'block'}} onClick={()=>{window.location.reload()}}> Restart</a>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}